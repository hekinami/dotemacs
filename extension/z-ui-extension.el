(defun z/toggle-transparency ()
  (interactive)
  (let ((current (frame-parameter nil 'alpha)))
    (if (or (booleanp current)
            (= (cadr (frame-parameter nil 'alpha))
               100))
        (set-frame-parameter nil 'alpha '(85 95))
      (set-frame-parameter nil 'alpha '(100 100))
      )
    ))

;;; http://www.emacswiki.org/emacs/TransposeWindows
(defun z/swap-window-positions (&optional arg)         ; Stephen Gildea
  "*Swap the positions of this window and the next one."
  (interactive "p")
  (let ((other-window (next-window (selected-window) 'no-minibuf)))
    (let ((other-window-buffer (window-buffer other-window))
          (other-window-hscroll (window-hscroll other-window))
          (other-window-point (window-point other-window))
          (other-window-start (window-start other-window)))
      (set-window-buffer other-window (current-buffer))
      (set-window-hscroll other-window (window-hscroll (selected-window)))
      (set-window-point other-window (point))
      (set-window-start other-window (window-start (selected-window)))
      (set-window-buffer (selected-window) other-window-buffer)
      (set-window-hscroll (selected-window) other-window-hscroll)
      (set-window-point (selected-window) other-window-point)
      (set-window-start (selected-window) other-window-start))
    ;;(select-window other-window)
    (if (= 4 arg)
        (select-window other-window))
    )
  )

;;; http://www.emacswiki.org/emacs/ToggleWindowSplit
(defun z/toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

(defun z/pop-window-into-frame ()
  (interactive)
  (let ((buffer (current-buffer)))
    (unless (one-window-p)
      (delete-window))
    (display-buffer-pop-up-frame buffer nil)))


(defun z/toggle-window-dedicated ()
  (interactive)
  (unless (boundp 'z/window-dedicated-p)
    (make-local-variable 'z/window-dedicated-p)
    (setq z/window-dedicated-p nil)
    )

  (if z/window-dedicated-p
      (progn
	(set-window-dedicated-p (selected-window) nil)
	(setq z/window-dedicated-p nil)
	(message "window is not dedicated")
	)
    (set-window-dedicated-p (selected-window) t)
    (setq z/window-dedicated-p t)
    (message "window is dedicated")
    )
  )

(provide 'z-ui-extension)
