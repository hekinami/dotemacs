* global
** general
   #+BEGIN_SRC emacs-lisp
   (setq custom-file (locate-user-emacs-file "custom.el"))
   (add-hook 'after-init-hook (lambda nil (load-file custom-file)))

   ;;; https://andrewjamesjohnson.com/suppressing-ad-handle-definition-warnings-in-emacs/
   (setq ad-redefinition-action 'accept)

   (fset 'yes-or-no-p 'y-or-n-p)
   (set-time-zone-rule "GMT-8")
   (setq user-full-name "Zou Bibo")
   (setq user-mail-address "zoubibo@amiunique.net")
   #+END_SRC

** configuration helpers
*** file location
    #+BEGIN_SRC emacs-lisp
    (defun locate-runtimes-file (file)
      (let ((base (locate-user-emacs-file "runtimes/")))
	(make-directory base t)
	(concat base file)))

    (defun locate-contents-file (file)
      (let ((base (locate-user-emacs-file "contents/")))
	(make-directory base t)
	(concat base file)))

    (defun locate-stuff-file (file)
      (let ((base (locate-user-emacs-file "stuff/")))
	(make-directory base t)
	(concat base file)))

    (defun locate-tools-file (file)
      (let ((base (locate-user-emacs-file "tools/")))
	(make-directory base t)
	(concat base file)))
    #+END_SRC
*** time
    #+BEGIN_SRC emacs-lisp
    (defun z/timestamp-format-setting ()
      (set (make-local-variable 'system-time-locale) "C")
      (set (make-local-variable 'system-messages-locale) "C")
      )
    #+END_SRC
** package management
*** package.el
    #+BEGIN_SRC emacs-lisp
    (setq package-enable-at-startup nil)
    ;; (package-initialize)
    (setq package-archives
          '(("gnu-cn" . "http://elpa.emacs-china.org/gnu/")
            ("melpa-cn" . "http://elpa.emacs-china.org/melpa/")
            ("melpa-stable-cn" . "http://elpa.emacs-china.org/melpa-stable/")
            ("marmalade-cn" . "http://elpa.emacs-china.org/marmalade/")
            ("org-cn" . "http://elpa.emacs-china.org/org/")
            ("sunrise-cn" . "http://elpa.emacs-china.org/sunrise-commander/")
            ("user42-cn" . "http://elpa.emacs-china.org/user42/")
            ;; ("melpa" . "http://melpa.org/packages/")
            ;; ("org" . "http://orgmode.org/elpa/")
            ;; ("melpa-stable" . "http://stable.melpa.org/packages/")
            ))
    #+END_SRC
*** assistent
**** a common function for installing package from elpa
     #+BEGIN_SRC emacs-lisp
     (defun require-package (package &optional min-version no-refresh)
       "Install given PACKAGE, optionally requiring MIN-VERSION.
       If NO-REFRESH is non-nil, the available package lists will not be
       re-downloaded in order to locate PACKAGE."
       (if (package-installed-p package min-version)
           t
         (if (or (assoc package package-archive-contents) no-refresh)
             (package-install package)
           (progn
             (package-refresh-contents)
             (require-package package min-version t)))))
     #+END_SRC
**** benchmark
     #+BEGIN_SRC emacs-lisp
     (require-package 'benchmark-init)
     (require 'benchmark-init)
     #+END_SRC
**** use-package
     #+BEGIN_SRC emacs-lisp
     (require-package 'use-package)
     #+END_SRC

**** quelpa
     #+BEGIN_SRC emacs-lisp
     (use-package quelpa-use-package
       :ensure t
       :init
       (setq quelpa-update-melpa-p nil)) 
     #+END_SRC

**** trying
     #+BEGIN_SRC emacs-lisp
     (use-package try
       :defer t
       :ensure t)
     #+END_SRC
*** extension
**** use packages written by self
     #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (locate-user-emacs-file "extension/"))
     #+END_SRC

** appearence
*** hide something first
    #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (setq visible-bell t)
    (setq inhibit-startup-message t)
    (setq initial-scratch-message nil)
    #+END_SRC
*** theme
    #+BEGIN_SRC emacs-lisp
    (use-package badwolf-theme
      :ensure t
      :config
      (load-theme 'badwolf t)
      (set-face-attribute 'default nil :foreground "#F8F8d2"))
    #+END_SRC

*** fonts & icons
    #+BEGIN_SRC emacs-lisp
    (use-package cnfonts
      :ensure t
      :hook (cnfonts-set-font-finish
             . (lambda (fontsizes-list)     ; https://github.com/seagle0128/doom-modeline/issues/278
                 (set-fontset-font
                  nil
                  'cyrillic
                  (font-spec :family "Fantasque Sans Mono"
                             :weight 'normal
                             :slant 'normal
                             :size 17))
                 ))
      :config
      (cnfonts-enable))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      ;; M-x all-the-icons-install-fonts
      :ensure t
      :after cnfonts
      )
    #+END_SRC

*** frame
    #+BEGIN_SRC emacs-lisp
    (setq frame-title-format "[%F]")

    (setq init-frame-alist
          (append
           `((height . 25)
             (width . 100)) default-frame-alist))

    (setq default-frame-alist
          (append
           `((height . 25)
             (width . 100)) default-frame-alist))

    (use-package frame
      :bind (("C-x C-a f" . toggle-frame-fullscreen)
             ("C-x C-a m" . toggle-frame-maximized)))

    (use-package z-ui-extension
      :bind (("C-x C-a t" . z/toggle-transparency)
             ("C-x \\" . z/swap-window-positions)
             ("C-x |" . z/toggle-window-split)))
    #+END_SRC
*** modeline
    #+BEGIN_SRC emacs-lisp
      (use-package doom-modeline
	:ensure t
	:hook (window-setup . doom-modeline-mode)
	:init
	;; How tall the mode-line should be. It's only respected in GUI.
	;; If the actual char height is larger, it respects the actual height.
	(setq doom-modeline-height 35)

	;; How wide the mode-line bar should be. It's only respected in GUI.
	(setq doom-modeline-bar-width 6)

	;; Whether display icons in mode-line or not.
	(setq doom-modeline-icon (display-graphic-p))

	;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
	(setq doom-modeline-major-mode-icon t)

	;; Whether display color icons for `major-mode'. It respects
	;; `doom-modeline-icon' and `all-the-icons-color-icons'.
	(setq doom-modeline-major-mode-color-icon t)

	;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
	(setq doom-modeline-buffer-state-icon t)

	;; Whether display buffer modification icon. It respects `doom-modeline-icon'
	;; and `doom-modeline-buffer-state-icon'.
	(setq doom-modeline-buffer-modification-icon t)

	;; Whether display minor modes in mode-line or not.
	(setq doom-modeline-minor-modes t)

	;; If non-nil, a word count will be added to the selection-info modeline segment.
	(setq doom-modeline-enable-word-count nil)

	;; Whether display buffer encoding.
	(setq doom-modeline-buffer-encoding t)

	;; Whether display indentation information.
	(setq doom-modeline-indent-info nil)

	;; If non-nil, only display one number for checker information if applicable.
	(setq doom-modeline-checker-simple-format t)

	;; The maximum displayed length of the branch name of version control.
	(setq doom-modeline-vcs-max-length 12)

	;; Whether display perspective name or not. Non-nil to display in mode-line.
	(setq doom-modeline-persp-name t)

	;; Whether display icon for persp name. Nil to display a # sign. It respects `doom-modeline-icon'
	(setq doom-modeline-persp-name-icon nil)

	;; Whether display `lsp' state or not. Non-nil to display in mode-line.
	(setq doom-modeline-lsp t)

	;; Whether display GitHub notifications or not. Requires `ghub` package.
	(setq doom-modeline-github nil)

	;; The interval of checking GitHub.
	(setq doom-modeline-github-interval (* 30 60))

	;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
	(setq doom-modeline-mu4e nil)

	;; Whether display irc notifications or not. Requires `circe' package.
	(setq doom-modeline-irc nil)

	;; Function to stylize the irc buffer names.
	(setq doom-modeline-irc-stylize 'identity)

	;; Whether display environment version or not
	(setq doom-modeline-env-version t)
	;; Or for individual languages
	(setq doom-modeline-env-enable-python t)
	(setq doom-modeline-env-enable-ruby t)
	(setq doom-modeline-env-enable-perl t)
	(setq doom-modeline-env-enable-go t)
	(setq doom-modeline-env-enable-elixir t)
	(setq doom-modeline-env-enable-rust t)

	;; Change the executables to use for the language version string
	(setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
	(setq doom-modeline-env-ruby-executable "ruby")
	(setq doom-modeline-env-perl-executable "perl")
	(setq doom-modeline-env-go-executable "go")
	(setq doom-modeline-env-elixir-executable "iex")
	(setq doom-modeline-env-rust-executable "rustc")

	;; What to dispaly as the version while a new one is being loaded
	(setq doom-modeline-env-load-string "...")

	;; Hooks that run before/after the modeline version string is updated
	(setq doom-modeline-before-update-env-hook nil)
	(setq doom-modeline-after-update-env-hook nil)
      )
    #+END_SRC

    #+begin_src emacs-lisp
    (use-package diminish
      :ensure t)
    #+end_src

    #+begin_src emacs-lisp
    (use-package minions
      :ensure t
      :hook (after-init . minions-mode))
    #+end_src
*** cursor
    #+BEGIN_SRC emacs-lisp
    (blink-cursor-mode 1)
    (setq blink-cursor-blinks 0)

    (setq hcz-set-cursor-color-color "")
    (setq hcz-set-cursor-color-buffer "")
    (defun hcz-set-cursor-color-according-to-mode ()
      "change cursor color according to some minor modes."
      ;; set-cursor-color is somewhat costly, so we only call it when needed:
      (let ((color
             (if buffer-read-only "blue"
               (if overwrite-mode "red"
                 "white"))))
        (unless (and
                 (string= color hcz-set-cursor-color-color)
                 (string= (buffer-name) hcz-set-cursor-color-buffer))
          (set-cursor-color (setq hcz-set-cursor-color-color color))
          (setq hcz-set-cursor-color-buffer (buffer-name)))))
    (add-hook 'post-command-hook 'hcz-set-cursor-color-according-to-mode)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    ;; (use-package highlight-tail
    ;;   :ensure t
    ;;   :config
    ;;   (highlight-tail-mode)
    ;;   (setq highlight-tail-timer 0.01)
    ;;   (diminish 'highlight-tail-mode))
    #+END_SRC
*** scrollbar
    #+BEGIN_SRC emacs-lisp
    (use-package yascroll
      :ensure t
      :config
      (global-yascroll-bar-mode))

    (setq auto-hscroll-mode 'current-line)
    #+END_SRC
*** indicators
    #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode 1)
    (column-number-mode 1)

    (use-package on-screen
      :ensure t
      :config
      (on-screen-global-mode +1))

    (use-package linum
      :defer t
      :config
      (add-hook 'linum-before-numbering-hook
                (lambda ()
                  (set-face-foreground 'linum "#4B8DF8"))))

    (use-package fancy-narrow
      :ensure t
      :diminish fancy-narrow-mode
      :bind ("C-x n n" . fancy-narrow-to-region)
      :config
      (fancy-narrow-mode))

    (use-package uniquify
      :config
      (setq  uniquify-buffer-name-style 'post-forward
             uniquify-separator ":"))
    #+END_SRC
** desktop, session, history
   #+BEGIN_SRC emacs-lisp
   (use-package savehist
     :defer t
     :config
     (setq savehist-file (locate-runtimes-file "history")))

   (defun emacs-session-filename (session-id)
     "override the original one"
     (let ((basename (concat "runtimes/session." session-id)))
       (locate-user-emacs-file basename
                               (concat ".emacs-" basename))))
   (setq auto-save-list-file-prefix (locate-runtimes-file "auto-save-list/.saves-"))
   (setq tramp-persistency-file-name (locate-runtimes-file "tramp"))
   (global-auto-revert-mode)
   (setq make-backup-files nil)
   (auto-compression-mode t)
   (auto-image-file-mode t)
   (setq auto-save-mode -1)
   (desktop-save-mode 0)
   (setq transient-history-file (locate-runtimes-file "transient-history.el"))
   #+END_SRC
** network
*** proxy
    #+begin_src emacs-lisp
    (defun toggle-network-proxy nil
      (interactive)
      (if url-proxy-services
          (setq url-proxy-services nil)
        (setq url-proxy-services
          '(("no_proxy" . "127.0.0.1")
            ("http" . "127.0.0.1:8118")
            ("https" . "127.0.0.1:8118"))))
      )
    #+end_src
*** emacs server
    #+BEGIN_SRC emacs-lisp
    (setq server-auth-dir (locate-runtimes-file "emacsserver"))
    (unless (and (functionp 'server-running-p)
                 (server-running-p))
      (server-start))   
    #+END_SRC
*** httpd
    #+BEGIN_SRC emacs-lisp
    (use-package simple-httpd
      :ensure t
      :config
      (setq url-cache-directory (locate-runtimes-file "url/cache"))
      (setq httpd-port 3721)
      (setq httpd-root (locate-runtimes-file "notebook"))
      (httpd-start)
      (advice-add 'save-buffers-kill-terminal :around (lambda (orig-fun &rest args)
                                                        (httpd-stop)
                                                        (apply orig-fun args)
                                                        )))
    #+END_SRC
** key configuration
   #+begin_src emacs-lisp
   (use-package key-chord
     :ensure t)

   (use-package use-package-chords
     :ensure t
     :config
     (key-chord-mode 1))
   #+end_src

   #+BEGIN_SRC emacs-lisp
   (global-unset-key (kbd "C-z"))
   (global-unset-key (kbd "<f8>"))
   (global-unset-key (kbd "C-x c"))
   (global-unset-key (kbd "<f5>"))

   (global-set-key (kbd "<f10>") 'menu-bar-mode)
   (global-set-key (kbd "C-c r") 'replace-regexp)
   (global-set-key (kbd "C-c $") 'toggle-truncate-lines)
   (global-set-key (kbd "<f1>") (lambda () (interactive)(switch-to-buffer "*scratch*")))
   #+END_SRC
* navigation
** helm
   #+BEGIN_SRC emacs-lisp
   (use-package helm
     :ensure t
     :diminish helm-mode
     :bind
     (("C-c h" . helm-command-prefix)
      ("M-x" . helm-M-x)
      ("C-x r l" . helm-filtered-bookmarks)
      ("C-x C-f" . helm-find-files))
     :init
     (setq bookmark-file (locate-runtimes-file "bookmarks")) ; must be set before enable helm-mode
     :config
     (require 'helm-config)
     (add-hook
      'helm-minibuffer-set-up-hook
      (lambda ()
        (set-face-attribute 'helm-selection nil :background (face-attribute 'hl-line :background))
        (set-face-attribute 'helm-source-header nil :background nil)
        (set-face-attribute 'helm-match nil :foreground (face-attribute 'font-lock-constant-face :foreground))
        ))
     (helm-mode 1))
   #+END_SRC
** windmove
   #+begin_src emacs-lisp
   (use-package windmove
     :ensure t
     :bind (("C-x <up>" . windmove-up)
            ("C-x <down>" . windmove-down)
            ("C-x <left>" . windmove-left)
            ("C-x <right>" . windmove-right)))
   #+end_src
** bookmark
   #+BEGIN_SRC emacs-lisp
   (use-package bm
     :ensure t
     :bind
     (("C-<f2>" . bm-toggle)
      ("<f2>" . bm-next)
      ("S-<f2>" . bm-previous)))

   (use-package helm-bm
     :ensure t
     :bind ("C-S-<f2>" . helm-bm))
   #+END_SRC
** hints
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :diminish which-key-mode
     :config
     (which-key-mode))
   #+END_SRC
** avy
   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :bind ("M-z" . avy-goto-word-1)
     :chords (("fj" . avy-goto-word-1)
              ("dk" . avy-kill-whole-line))
     :config
     (setq avy-keys (append (number-sequence ?a ?z) (number-sequence ?A ?Z)))
     (setq avy-style 'at)
     (setq avy-background t)
             ;;; select current position to the position jumped to
     (advice-add 'avy-goto-char :around 
                 (lambda (orig-fun &rest args)
                   (push-mark)
                   (apply orig-fun args)
                   (forward-char))))

   (use-package ace-pinyin
     :quelpa (ace-pinyin :fetcher github :repo "hekinami/ace-pinyin")
     :bind (("M-/" . ace-pinyin-dwim))
     :chords (("gh" . ace-pinyin-dwim)))
   #+END_SRC
** searching
*** swoop
    #+BEGIN_SRC emacs-lisp
    (use-package swoop
      :ensure t
      :bind
      (("C-o" . swoop)
       ("M-o" . swoop-pcre-regexp)
       ("C-S-o" . swoop-back-to-last-position)
       :map swoop-map
       ("C-o" . swoop-multi-from-swoop))
      :config
      (setq swoop-use-target-magnifier: nil)
      (setq swoop-font-size-change: nil)
      )
    #+END_SRC
*** rg
    #+begin_src emacs-lisp
    (use-package rg :ensure t :defer t)
    (use-package helm-rg :ensure t :defer t)
    #+end_src
** treemacs
   #+begin_src emacs-lisp
   (use-package treemacs
     :ensure t
     :defer t
     :bind ("C-z s" . treemacs)
     )
   #+end_src
* resource management
** project management
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :defer t
     :bind ("C-x C-b" . helm-projectile-switch-to-buffer)
     :bind-keymap ("C-c p" . projectile-command-map)
     :config
     (setq projectile-known-projects-file (locate-runtimes-file "projectile-bookmarks.eld"))
     (setq projectile-mode-line-prefix "")
     (setq projectile-tags-command "ctags-exuberant -Re -f \"%s\" %s \"%s\"")
     (projectile-global-mode)
     (setq projectile-completion-system 'helm))

   (use-package helm-projectile
     :ensure t
     :config (helm-projectile-on)
     :after projectile)

   (use-package treemacs-projectile
     :ensure t
     :defer t)
   #+END_SRC
** system file management
*** dired
    #+BEGIN_SRC emacs-lisp
    (use-package dired-x :defer t)
    (use-package dired-single
      :ensure t :defer t)

    (defun my-dired-init ()
      "Bunch of stuff to run for dired, either immediately or when it's
         loaded."
      ;; <add other stuff here>
      (define-key dired-mode-map [return] 'dired-single-buffer)
      (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
      (define-key dired-mode-map "^"
        (function
         (lambda nil (interactive) (dired-single-buffer ".."))))
      (define-key dired-mode-map (kbd "K") 'dired-k))

    ;; if dired's already loaded, then the keymap will be bound
    (if (boundp 'dired-mode-map)
        ;; we're good to go; just add our bindings
        (my-dired-init)
      ;; it's not loaded yet, so add our bindings to the load-hook
      (add-hook 'dired-load-hook 'my-dired-init))
    #+END_SRC
** buffer management
   #+BEGIN_SRC emacs-lisp
   (use-package z-edit-ext
     :init
     (add-hook 'gdb-mode-hook 'kill-buffer-when-exit)
     (add-hook 'jdb-mode-hook 'kill-buffer-when-exit)
     (add-hook 'pdb-mode-hook 'kill-buffer-when-exit)
     (add-hook 'comint-mode-hook 'kill-buffer-when-exit)
     (add-hook 'shell-mode-hook 'kill-buffer-when-exit)
     (add-hook 'inferior-python-mode-hook 'kill-buffer-when-exit)
     (add-hook 'inferior-js-mode-hook 'kill-buffer-when-exit)
     (add-hook 'compilation-mode-hook 'kill-buffer-when-exit))
   #+END_SRC
** sudo
   #+BEGIN_SRC emacs-lisp
   (use-package z-sudo
     :bind ("C-x C-r" . find-file-root))
   #+END_SRC
* screen organization
** window management
*** tab-bar
    #+begin_src emacs-lisp
    (use-package tab-bar
      :init
      (setq tab-bar-show 1)
      :config
      (set-face-attribute 'tab-bar nil :foreground "black" :background "grey25")
      (set-face-attribute 'tab-bar-tab nil :box nil :background "grey45")
      (set-face-attribute 'tab-bar-tab-inactive nil :box nil :background "grey25" :foreground "grey50")
      ;; (tab-bar-mode)
      )
    #+end_src
*** centaur-tabs
    #+begin_src emacs-lisp
    (use-package centaur-tabs
      :ensure t
      :demand
      :init
      ;; make centaur-tabs-switch-group use helm
      (fset 'ido-completing-read #'completing-read)
      :bind
      ("C-<prior>" . centaur-tabs-backward)
      ("C-<next>" . centaur-tabs-forward)
      ("C-x t g" . centaur-tabs-toggle-groups)
      ("C-x t s" . centaur-tabs-switch-group)
      :hook
      (term-mode . centaur-tabs-local-mode)
      (calendar-mode . centaur-tabs-local-mode)
      (org-agenda-mode . centaur-tabs-local-mode)
      (helpful-mode . centaur-tabs-local-mode)
      :config
      (setq centaur-tabs-set-icons t)
      (setq centaur-tabs-gray-out-icons 'buffer)
      (setq centaur-tabs-set-bar 'over)
      (setq centaur-tabs-set-modified-marker t)
      (setq centaur-tabs-cycle-scope 'tabs)
      (centaur-tabs-mode t)
      (centaur-tabs-headline-match)

      ;; overwrite the original rule
      (defun centaur-tabs-buffer-groups ()
        (list
         (cond
          ((or (string-equal "*Deft*" (buffer-name))
               (and (string-match-p (regexp-quote "/deft/") (or (buffer-file-name) ""))
                    (memq major-mode '(org-mode org-agenda-mode diary-mode))))
           "Deft")
          ((and (string-match-p (regexp-quote "/organizer/") (or (buffer-file-name) ""))
                (memq major-mode '(org-mode org-agenda-mode diary-mode)))
           "Organizer")
          ((memq major-mode '(org-mode org-agenda-mode diary-mode))
           "OrgMode")
          ((or (string-equal "*" (substring (buffer-name) 0 1))
               (memq major-mode '(magit-process-mode
                                  magit-status-mode
                                magit-diff-mode
                                magit-log-mode
                                magit-file-mode
                                magit-blob-mode
                                magit-blame-mode
                                )))
         "Emacs")
        ((derived-mode-p 'eshell-mode)
         "EShell")
        ((derived-mode-p 'emacs-lisp-mode)
         "Elisp")
        ((derived-mode-p 'dired-mode)
         "Dired")
        (t
         (centaur-tabs-get-group-name (current-buffer))))))
      )


    #+end_src
*** winner
    #+BEGIN_SRC emacs-lisp
    (use-package winner
      :defer t)
    #+END_SRC
*** purpose (obsolete)
    #+BEGIN_SRC emacs-lisp
    (use-package window-purpose
      :ensure t
      :config
      ;; (purpose-mode) 
      (setq purpose-preferred-prompt 'helm)

      (define-key purpose-mode-map (kbd "C-x C-f") nil)
      (define-key purpose-mode-map (kbd "C-x b") nil)
      (add-to-list 'purpose-user-mode-purposes '(python-mode . py))
      (add-to-list 'purpose-user-mode-purposes '(inferior-python-mode . py-repl))
      (purpose-compile-user-configuration))
    #+END_SRC
*** shackle
    #+BEGIN_SRC emacs-lisp
    (use-package shackle
      :ensure t
      :config
      (setq shackle-rules
            '(("\\`\\*helm.*?\\*\\'" :regexp t :align bottom :size 0.3)
              (magit-diff-mode :noselect t :align right :size 0.7)
              ))

      (defmacro shackle-rule-with-purpose-mode (shackle-rule)
        "define shackle rule coexisting with purpose-mode."
        ;; https://github.com/bmag/emacs-purpose/issues/157
        ;; https://github.com/bmag/emacs-purpose/issues/124
        `(progn
           (add-to-list 'shackle-rules ,shackle-rule)
           (add-to-list 'purpose-action-function-ignore-buffer-names (car ,shackle-rule)))
        )

      (shackle-rule-with-purpose-mode '("^\\*Help\\*" :regexp t :select t :align bottom :size 0.6))
      (shackle-rule-with-purpose-mode '("^\\*shell\\*" :regexp t :select t :align bottom :size 0.3))
      (shackle-rule-with-purpose-mode '("^\\*eshell\\*" :regexp t :select t :align bottom :size 0.3))
      (shackle-rule-with-purpose-mode '("^\\*compilation\\*" :regexp t :select t :align bottom :size 0.3))
      (shackle-rule-with-purpose-mode '("manage.py shell\\*" :regexp t :select t :align bottom :size 0.3))
      (shackle-rule-with-purpose-mode '("manage.py runserver" :regexp t :select t :align bottom :size 0.3))
      (shackle-rule-with-purpose-mode '("^\\*hackernews top stories\\*" :regexp t :select t :align left :size 0.7))
      (shackle-mode))
    #+END_SRC
*** popwin
    #+BEGIN_SRC emacs-lisp
    ;; (use-package popwin
    ;;   :ensure t
    ;;   :bind-keymap ("C-z p" . popwin:keymap)
    ;;   :config
    ;;   (popwin-mode)
    ;;   (push '("*Backtrace*" :height 15) popwin:special-display-config)
    ;;   (push '("*Python*" :position bottom :height 20) popwin:special-display-config)
    ;;   (push '("*jedi:doc*" :position bottom :height 20) popwin:special-display-config)
    ;;   (push '("*Warnings*" :position bottom :height 20) popwin:special-display-config)
    ;;   (push '("*Org Agenda*" :position bottom :height 20) popwin:special-display-config)
    ;;   (push '("* Agenda Commands*" :position bottom :height 20) popwin:special-display-config)
    ;;   (push '("*GEBEN<127.0.0.1:9000> output*" :position bottom :height 20) popwin:special-display-config)
    ;;   (push '("*GEBEN<127.0.0.1:9000> context*" :position bottom :width 20) popwin:special-display-config)
    ;;   (push '("*buffer selection*" :position bottom :width 20) popwin:special-display-config)
    ;;   (push '("*SPEEDBAR*" :position left :width 20) popwin:special-display-config)
    ;;   (push '("*Help*" :position bottom :width 20) popwin:special-display-config)
    ;;   (push '("*js*" :position bottom :width 20) popwin:special-display-config))
    #+END_SRC

**** usage
     | Key    | Command                             |
     |--------+-------------------------------------|
     | b      | popwin:popup-buffer                 |
     | l      | popwin:popup-last-buffer            |
     | o      | popwin:display-buffer               |
     | C-b    | popwin:switch-to-last-buffer        |
     | C-p    | popwin:original-pop-to-last-buffer  |
     | C-o    | popwin:original-display-last-buffer |
     | SPC    | popwin:select-popup-window          |
     | s      | popwin:stick-popup-window           |
     | 0      | popwin:close-popup-window           |
     | f, C-f | popwin:find-file                    |
     | e      | popwin:messages                     |
     | C-u    | popwin:universal-display            |
     | 1      | popwin:one-window                   |
*** extension
    #+begin_src emacs-lisp
    (use-package screen-ext
      :bind ("C-x 5 p" . z/pop-window-into-frame))
    #+end_src
* editing
** editorconfig
   #+BEGIN_SRC emacs-lisp
   (use-package editorconfig
     :ensure t
     :diminish editorconfig-mode
     :config
     (editorconfig-mode 1))
   #+END_SRC
** language and localization
   #+BEGIN_SRC emacs-lisp
   ;; (set-language-environment 'utf-8)
   ;; (setq encoding 'utf-8)
   ;; (set-terminal-coding-system 'utf-8)
   ;; (prefer-coding-system 'utf-8)
   ;; (set-default-coding-systems 'utf-8)
   ;; (set-keyboard-coding-system 'utf-8)
   ;; (set-buffer-file-coding-system 'utf-8)
   ;; (setq default-buffer-file-coding-system 'utf-8)
   ;; (setq coding-system-for-read 'utf-8)
   ;; (set-clipboard-coding-system 'utf-8)
   ;; (setq file-name-coding-system 'utf-8)

   ;; (set-locale-environment "C")
   #+END_SRC
   #+begin_src emacs-lisp
   (use-package mule
     :init
     (setq encoding 'utf-8)
     :config
     (prefer-coding-system 'utf-8)
     (set-language-environment 'utf-8)
     (set-locale-environment "C")
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-buffer-file-coding-system 'utf-8)
     (set-clipboard-coding-system 'utf-8)
     (setq default-buffer-file-coding-system 'utf-8)
     (setq coding-system-for-read 'utf-8)
     (setq file-name-coding-system 'utf-8)
     )
   #+end_src
** undo
   #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :ensure t
     :diminish undo-tree-mode
     :bind ("C-x u" . undo-tree-visualize)
     :config
     (global-undo-tree-mode))
   #+END_SRC
** input assistent
*** company-mode
    #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :defer t
      :diminish (company-mode global-company-mode)
      :init
      (global-company-mode))
    #+END_SRC
*** yasnippet
    #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :diminish yas-minor-mode
      :bind
      (:map yas-minor-mode-map
            ("<tab>" . nil)
            ("TAB" . nil)
            ("<backtab>" . yas-expand))
      :init (add-hook 'after-init-hook 'yas-global-mode)
      :config
      (setq yas-triggers-in-field t)
      (setq yas-also-auto-indent-first-line t)
      (setq yas-prompt-functions
            '(yas-ido-prompt
              yas-completing-prompt
              yas-x-prompt yas-dropdown-prompt yas-no-prompt)))

    (use-package yasnippet-snippets
      :defer t
      :ensure t
      :config (yas-reload-all))

    #+END_SRC
*** multiple cursors
    #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :bind (("C-S-c C-S-c" . mc/edit-lines)
             ("C->" . mc/mark-next-like-this)
             ("C-<" . mc/mark-previous-like-this)
             ("C-c C-<" . mc/mark-all-like-this)
             :map mc/keymap
             ("C-z n" . mc/insert-numbers)
             ("C-z l" . mc/insert-letters))
      :init
      (setq mc/list-file (locate-runtimes-file ".mc-lists.el"))
      (add-hook 'multiple-cursors-mode-hook
                (lambda ()
                  (define-key mc/keymap (kbd "C-z n") 'mc/insert-numbers)
                  (define-key mc/keymap (kbd "C-z l") 'mc/insert-letters)
                  )))
    #+END_SRC
*** quotation
    #+BEGIN_SRC emacs-lisp
    (use-package ciel
      :ensure t
      :bind
      (("C-c i" . ciel-ci)
       ("C-c o" . ciel-co)))

    (use-package embrace
      :ensure t
      :bind ("C-," . embrace-commander)
      :init
      (add-hook 'org-mode-hook #'embrace-org-mode-hook))

    (electric-pair-mode)
    #+END_SRC
*** indentation
    #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)

    (use-package aggressive-indent
      :ensure t
      :mode ("aggressive-indent-mode")
      :diminish aggressive-indent-mode)
    #+END_SRC
** atomic chrome
   #+begin_src emacs-lisp
   (use-package atomic-chrome :ensure t
     :config
     (setq atomic-chrome-buffer-open-style 'frame)
     (atomic-chrome-start-server))
   #+end_src
* reading
  #+BEGIN_SRC emacs-lisp
  (use-package google-translate
    :ensure t
    :bind (("C-c t" . google-translate-at-point)
           ("C-c T" . google-translate-query-translate))
    :init
    (setq google-translate-base-url
          "http://translate.google.cn/translate_a/single")
    (setq google-translate-listen-url
          "http://translate.google.cn/translate_tts")
    (setq google-translate--tkk-url
          "http://translate.google.cn/")  
    )

  (use-package engine-mode
    :ensure t
    :init
    (engine/set-keymap-prefix (kbd "C-z C-s"))
    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "g")

    (defengine esdict.cn
      "https://www.esdict.cn/dicts/es/%s"
      :keybinding "e"
      :browser 'eww-browse-url)

    (defengine dict.cn
      "https://dict.cn/%s"
      :keybinding "d"
      :browser 'eww-browse-url)

    (defengine dictionary.com
      "https://www.dictionary.com/browse/%s"
      :keybinding "i"
      :browser 'eww-browse-url)

    (defengine bing
      "https://cn.bing.com/search?q=%s"
      :keybinding "b")

    (defengine wikipedia
      "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w"
      :docstring "Searchin' the wikis.")
    (engine-mode t))

  (use-package irfc
    :ensure t
    :defer t
    :config
    (setq irfc-download-base-url "https://www.ietf.org/rfc/")
    (setq irfc-directory (locate-runtimes-file "RFC"))
    (add-to-list 'auto-mode-alist
                 '("/rfc[0-9]+\\.txt\\'" . irfc-mode)))

  (use-package xkcd
    :ensure t
    :defer t
    :config
    (setq xkcd-cache-dir (locate-runtimes-file "xkcd"))
    (setq xkcd-cache-latest (locate-runtimes-file "xkcd/latest")))

  (use-package hackernews
    :ensure t
    :commands (hackernews)
    :config
    (setq hackernews-visited-links-file (locate-runtimes-file "hackernews/visited-links.el")))

  (use-package elfeed
    :ensure t
    :commands (elfeed)
    :config
    (use-package elfeed-org
      :ensure t
      :defer t
      :config
      (elfeed-org)
      (setq rmh-elfeed-org-files (list (locate-contents-file "others/elfeed.org"))))
    (use-package elfeed-goodies
      :ensure t
      :defer t
      :config
      (elfeed-goodies/setup)))

  (use-package doc-view
    :init
    (setq doc-view-resolution 600))

  (use-package pdf-tools
    :ensure t
    :defer t
    :config
    (pdf-tools-install))

  (use-package org-pdfview
    :ensure t
    :defer t)

  ;;; ------------------------------------------------------------
  ;;;
  ;;; xwidget webkit
  ;;;
  ;;; ------------------------------------------------------------
  (use-package xwidget
    :bind
    (:map xwidget-webkit-mode-map
          ("<mouse-5>" . xwidget-webkit-scroll-up)
          ("<mouse-4>" . xwidget-webkit-scroll-down)))

  (use-package justify-kp
    :after nov
    :quelpa (justify-kp :fetcher github :repo "hekinami/justify-kp"))

  (use-package nov
    :quelpa (nov :fetcher github :repo "hekinami/nov.el")
    :mode ("\\.epub\\'" . nov-mode)
    :config
    (setq nov-save-place-file (locate-runtimes-file "nov-places"))
    (require 'justify-kp)
    (setq nov-text-width t)
    (setq nov-variable-pitch t)

    (defun my-nov-font-setup ()
      (face-remap-add-relative 'variable-pitch :family "Sorts Mill Goudy"
                               :slant 'italic :height 1.5 :foreground "#C7C4B7")
      (set (make-variable-buffer-local 'shr-width) 88)
      )
    (add-hook 'nov-mode-hook 'my-nov-font-setup)

    (defun nov-refresh-document ()
      "The purpose is keep the cursor location after re-render the document"
      (interactive)
      ;; not perfect for now. 
      ;; e.g. if the <hr> tag rendered with different '-'s, the location changes
      (let ((point (point)))
        (nov-render-document)
        (goto-char point)))

    (define-key nov-mode-map (kbd "g") 'nov-refresh-document)

    (defun my-nov-post-html-render-hook ()
      (if (get-buffer-window)
          (cl-letf (((symbol-function 'pj-line-width) (lambda () 800)))
            (let ((max-width (pj-line-width))
                  buffer-read-only)
              (save-excursion
                (goto-char (point-min))
                (while (not (eobp))
                  (when (not (looking-at "^[[:space:]]*$"))
                    (goto-char (line-end-position))
                    (when (> (shr-pixel-column) max-width)
                      (goto-char (line-beginning-position))
                      (pj-justify)))
                  (forward-line 1)))))))

    (defun my-nov-mode-hook ()
      (visual-line-mode))

    (add-hook 'nov-mode-hook 'my-nov-mode-hook)
    (add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook))
  #+END_SRC
* writing
** generate static site
   #+begin_src emacs-lisp
   (use-package ox-hugo
     :ensure t
     :after ox
     :config
     (setq org-hugo-section "posts")
     (setq org-hugo-default-static-subdirectory-for-externals "images")
     (setq org-hugo-basedir "~/hugo"))     ;not a native variable of ox-hugo

   (use-package easy-hugo
     :ensure t
     :defer t
     :config
     (setq easy-hugo-basedir "~/hugo/"))
   #+end_src

   #+BEGIN_SRC emacs-lisp
   (use-package cobalt
     :ensure t
     :bind (("C-z c d" . cobalt-deploy)
            ("C-z c p" . cobalt-generate-posts-source-from-org))
     :config
     (setq cobalt-posts-org-source (locate-contents-file "earl/posts.amiunique.net"))
     (setq cobalt-source (locate-contents-file "earl/cobalt.amiunique.net"))
     (setq cobalt-dest-base (locate-contents-file "earl/hekinami.gitlab.io"))
     (setq cobalt-site-paths '(cobalt-source))
     (setq cobalt--current-site cobalt-source)

     (defun cobalt-generate-posts-source-from-org ()
       ""
       (interactive)
       (let* ((org-publish-project-alist
               `(("cobalt-posts"
                  :base-directory ,cobalt-posts-org-source
                  :publishing-directory ,(concat cobalt-source "/posts")
                  :publishing-function org-html-publish-to-html
                  :section-numbers nil
                  :with-toc nil
                  :body-only t
                  )
                 ("cobalt-post-images"
                  :base-directory ,(concat cobalt-posts-org-source "/images")
                  :base-extension "jpg\\|gif\\|png"
                  :publishing-directory ,(concat cobalt-source "/posts/images")
                  :publishing-function org-publish-attachment)
                 ("cobalt" :components ("cobalt-posts" "cobalt-post-images"))
                 ))
              )

         (org-publish-project "cobalt")
         )
       )

     (defun cobalt-build-with-posts-from-org ()
       ""
       (interactive)
       (cobalt-generate-posts-source-from-org)
       (cobalt-build nil)
       )

     (defun cobalt-deploy ()
       ""
       (interactive)
       (cobalt-build-with-posts-from-org)
       (magit-status cobalt-dest-base)
       )
     )
   #+END_SRC
** lilypond
   #+begin_src emacs-lisp
   (use-package lilypond-mode
     :quelpa (lilypond-mode :fetcher github :repo "hekinami/lilypond-mode")
     :defer t
     :init
     (add-to-list 'auto-mode-alist '("\\.ly$" . LilyPond-mode)))
   #+end_src
** plantuml
   #+begin_src emacs-lisp
   (use-package plantuml-mode :ensure t
     :defer t
     :config
     (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
     (setq plantuml-jar-path "/opt/plantuml/plantuml.jar")
     (setq plantuml-default-exec-mode 'jar)
     (eval-after-load "org"
       '(progn
          (setq org-plantuml-jar-path "/opt/plantuml/plantuml.jar")
          (add-to-list
           'org-src-lang-modes '("plantuml" . plantuml)))
       )
     )
   #+end_src
* organizer
** org-mode
*** general
    #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure org-plus-contrib
      :bind
      (("C-c l" . org-store-link)
       ("C-c b" . org-switchb))
      :config
      (setq org-directory (locate-contents-file "organizer"))
      (setq org-modules '(org-crypt org-checklist org-habit org-tempo))
      (setq org-time-stamp-custom-formats '("<%y/%m/%d %w>" . "<%y/%m/%d %w %H:%M>"))
      (setq org-bookmark-names-plist nil)

      (use-package z-org-ext
        :bind (("<f8> <f8>" . z/open-browser)
               :map org-mode-map
               (("C-c s" . z/org-screenshot)
                ("C-c d" . z/org-delete-linked-file-in-point)))
        :commands (z/org-clock-in-if-todo-keywords z/org-clock-out-if-todo-keywords)
        :init
        (add-hook 'org-after-todo-state-change-hook
                  'z/org-clock-in-if-todo-keywords)
        (add-hook 'org-after-todo-state-change-hook
                  'z/org-clock-out-if-todo-keywords)
        )

      ;; Priority Definition
      ;;
      ;; A: do: good, don't: harm, cannot atone
      ;; B: do: good, don't: harm, can atone
      ;; C: do: good, don't: may be harmful
      ;; D: do: good, don't: no harm
      ;; E: do: may be good, don't: no harm
      (setq org-highest-priority ?A)
      (setq org-lowest-priority ?E)
      (setq org-default-priority ?C)

      (use-package uuidgen
        :ensure t
        :commands (uuidgen-4))

      ;; https://emacs-china.org/t/org-agenda/8679/2
      ;; (defun my:org-agenda-time-grid-spacing ()
      ;;   "Set different line spacing w.r.t. time duration."
      ;;   (save-excursion
      ;;     (let* ((background (alist-get 'background-mode (frame-parameters)))
      ;;            (background-dark-p (string= background "dark"))
      ;;            (colors (if background-dark-p
      ;;                        (list "#a63d40" "#e9b872" "#90a959" "#6494aa")
      ;;                      (list "#F6B1C3" "#FFFF9D" "#BEEB9F" "#ADD5F7")))
      ;;            pos
      ;;            duration)
      ;;       (nconc colors colors)
      ;;       (goto-char (point-min))
      ;;       (while (setq pos (next-single-property-change (point) 'duration))
      ;;         (goto-char pos)
      ;;         (when (and (not (equal pos (point-at-eol)))
      ;;                    (setq duration (org-get-at-bol 'duration)))
      ;;           (let ((line-height (if (< duration 30) 1.0 (+ 0.5 (/ duration 60))))
      ;;                 (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
      ;;             (overlay-put ov 'face `(:background ,(car colors)
      ;;                                                 :foreground
      ;;                                                 ,(if background-dark-p "black" "white")))
      ;;             (setq colors (cdr colors))
      ;;             (overlay-put ov 'line-height line-height)
      ;;             (overlay-put ov 'line-spacing (1- line-height))))))))

      ;; (add-hook 'org-agenda-finalize-hook 'my:org-agenda-time-grid-spacing)
      )
    #+END_SRC

*** appearence
    #+begin_src emacs-lisp
    (setq org-ellipsis " »")
    (set-face-attribute 'org-ellipsis nil :underline nil :foreground "green")
    ;; badwolf theme set outline-1 face (inherited by org-level-1) with height 1.2, use default value to reset it
    (set-face-attribute 'outline-1 nil :height (plist-get face--attributes-unspecified :height))
    (set-face-attribute 'org-document-title nil :height (plist-get face--attributes-unspecified :height))
    (set-face-attribute 'org-level-1 nil :underline nil :foreground "#2a9d8f" :slant 'normal :weight 'bold)
    (set-face-attribute 'org-level-2 nil :underline nil :foreground "#e76f51" :slant 'normal :weight 'bold)
    (set-face-attribute 'org-level-3 nil :underline nil :foreground "#f4a261" :slant 'normal :weight 'bold)
    (set-face-attribute 'org-level-4 nil :underline nil :foreground "#edce85" :slant 'normal :weight 'bold)
    (set-face-attribute 'org-todo nil :underline nil :foreground "#b23a48" :slant 'normal :weight 'bold)
    (set-face-attribute 'org-done nil :underline nil :foreground "#461220" :slant 'normal :weight 'bold)
    (set-face-attribute 'org-agenda-done nil :foreground "#666462")
    (set-face-attribute 'org-upcoming-deadline nil :foreground "#edce85")
    (set-face-attribute 'org-checkbox-statistics-todo nil :underline nil :foreground "#b23a48" :slant 'normal :weight 'bold :box nil)
    (set-face-attribute 'org-checkbox-statistics-done nil :underline nil :foreground "#461220" :slant 'normal :weight 'bold :box nil)
    #+end_src

    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :defer t
      :config
      (setq org-bullets-bullet-list '("♠" "♥" "♣" "♦"))
      :after org)

    (setq org-hide-leading-stars t)
    (setq org-startup-indented nil)
    (setq org-cycle-separator-lines 0)

    (setq org-catch-invisible-edits 'smart)
    (setq org-agenda-window-setup 'other-window)
    ;; table
    (setq table-html-th-rows 1)
    (setq table-html-table-attribute "")
    (setq table-inhibit-auto-fill-paragraph t)

    (add-hook 'org-mode-hook (lambda ()
                               (org-bullets-mode 1)
                               (z/timestamp-format-setting)
                               ))

    ;;; modify columns font to mono
    ;;; the reason is that origin function use default face to decide the font family, which may not be mono
    (advice-add 'org-columns-display-here :around
                (lambda (orig-fun &rest args)
                  (let ((temp-family (face-attribute 'default :family)))
                    (apply orig-fun args)
                    (set-face-attribute 'default nil :family temp-family)
                    )
                  ))
    #+END_SRC

    #+begin_src emacs-lisp
    (use-package org-fancy-priorities
      :ensure t
      :hook
      (org-mode . org-fancy-priorities-mode)
      :diminish org-fancy-priorities-mode
      :config
      (setq org-fancy-priorities-list '("🅰" "🅱" "🅲" "🅳" "🅴"))
      (setq org-priority-faces
          '((?A . (:foreground "#a63d40" :weight bold))
            (?B . (:foreground "#e9b872" :weight bold))
            (?C . (:foreground "white" :weight bold))
            (?D . (:foreground "#6494aa" :weight bold))
            (?E . (:foreground "#90a959" :weight bold))))
      )
    #+end_src

    #+begin_src emacs-lisp
    (add-hook 'org-mode-hook (lambda ()
      "Beautify Org Checkbox Symbol"
      (push '("[ ]" . "☐") prettify-symbols-alist)
      (push '("[X]" . "☑" ) prettify-symbols-alist)
      (push '("[-]" . "☐" ) prettify-symbols-alist)
      (prettify-symbols-mode)))
    #+end_src
*** editing
    #+begin_src emacs-lisp
    (advice-add 'org-insert-todo-heading :around
                (lambda (orig-fun &rest args)
                  (apply orig-fun args)
                  (org-priority-up)
                  ))
    #+end_src
*** efficiency
**** agenda
     #+BEGIN_SRC emacs-lisp
     (use-package org-agenda
       :bind ("C-c a" . org-agenda)
       :after org
       :config
       (setq org-agenda-overriding-columns-format "%25ITEM %TODO %CATEGORY %3PRIORITY %20TAGS")
       (setq org-agenda-todo-ignore-scheduled t)
       (setq org-agenda-todo-ignore-deadlines 'far)
       (setq org-agenda-skip-scheduled-if-done nil)
       (setq org-agenda-skip-deadline-if-done nil)
       (setq org-agenda-span 'day)
       (setq org-agenda-sorting-strategy '((agenda time-up todo-state-down priority-down scheduled-up  deadline-up)
                                           (todo todo-state-down priority-down)))

       (add-hook 'org-agenda-mode-hook (lambda ()
                                         (z/timestamp-format-setting)
                                         (define-key org-agenda-mode-map " " 'org-agenda-cycle-show)
                                         ))

       (setq org-agenda-files `(,(concat org-directory "/gtd")
                                ,(concat org-directory "/info")))

       (setq org-deadline-warning-days 3)
       (setq org-log-into-drawer t)
       (setq org-enforce-todo-dependencies t)
       (setq org-enforce-todo-checkbox-dependencies t)
       (setq org-agenda-skip-scheduled-if-deadline-is-shown t)

       (setq org-agenda-custom-commands
             '(("A" "Accounts" ((tags "account" ((org-agenda-hide-tags-regexp "account\\|crypt")
                                                 (org-agenda-prefix-format "")))))
               ("L" "Links" ((tags "link" ((org-agenda-hide-tags-regexp "link")
                                           (org-agenda-prefix-format "")))))
               ))

       (setq org-agenda-prefix-format '((agenda . "  %?-12t% s")
                                        (todo . "  ")
                                        (tags . " %i %-12:c")
                                        (search . " %i %-12:c")))

       ;; always in bottom
       (defadvice org-agenda (around split-vertically activate)
         (let ((split-width-threshold nil))
           ad-do-it))

       )
     #+END_SRC

     #+begin_src emacs-lisp
     (use-package org-super-agenda
       :ensure t
       :config
       (advice-add 'org-agenda-list :around
                   (lambda (orig-fun &rest args)
                     (let ((org-super-agenda-groups org-agenda-list-super-groups))
                       (apply orig-fun args)))
                   )
       (advice-add 'org-todo-list :around
                   (lambda (orig-fun &rest args)
                     (let ((org-super-agenda-groups org-todo-list-super-groups))
                       (apply orig-fun args)))
                   )
       ;; define groups in custom.el avoiding too verbose here.
       (setq org-agenda-list-super-groups nil)
       (setq org-todo-list-super-groups nil)
       (org-super-agenda-mode)
       )
     #+end_src
**** capture
     #+BEGIN_SRC emacs-lisp
     (use-package org-capture
       :bind ("C-c c" . org-capture)
       :after org
       :config
       (defadvice org-capture (around split-vertically activate)
         (let ((split-width-threshold nil))
           ad-do-it))
       (load (locate-stuff-file "org-capture-templates") t))
     #+END_SRC
**** pomodoro
     #+BEGIN_SRC emacs-lisp
     (use-package org-pomodoro
       :ensure t
       :after org
       :bind ("<f11>" . org-pomodoro)
       :config
       (setq org-pomodoro-length 25)
       (setq org-pomodoro-long-break-frequency 4)
       (setq org-pomodoro-short-break-length 5)
       (setq org-pomodoro-long-break-length 10)
       (setq org-pomodoro-format "P:%s")
       (setq org-pomodoro-short-break-sound (locate-stuff-file "short-break-sound.mp3"))
       (setq org-pomodoro-long-break-sound (locate-stuff-file "long-break-sound.mp3"))
       (setq org-pomodoro-audio-player "/usr/bin/mpv")
       )
     #+END_SRC
**** kanban
     #+BEGIN_SRC emacs-lisp
     (use-package org-kanban
       :ensure t
       :defer t)
     #+END_SRC
**** appointment
     #+BEGIN_SRC emacs-lisp
     (use-package appt
       :defer t
       :config
       (require 'appt)
       (appt-activate t)

       (setq appt-message-warning-time 10)
       (setq appt-display-interval (1+ appt-message-warning-time)) ; disable multiple reminders
       (setq appt-display-mode-line nil)

       ;; use appointment data from org-mode
       (defun z/org-agenda-to-appt ()
         (interactive)
         (setq appt-time-msg-list nil)
         (org-agenda-to-appt))

       ;; run when starting Emacs and everyday at 12:05am
       (z/org-agenda-to-appt)
       (run-at-time "12:05am" (* 24 3600) 'z/org-agenda-to-appt)

       ;; automatically update appointments when TODO.txt is saved
       (add-hook 'after-save-hook
                 '(lambda ()
                    (if (string= (buffer-file-name) (expand-file-name
                                                     (locate-contents-file "gtd/event.gtd.org")))
                        (z/org-agenda-to-appt)))))
     #+END_SRC
**** time clocking
     #+BEGIN_SRC emacs-lisp
     (add-hook 'org-clock-in-hook 'save-buffer)
     (add-hook 'org-clock-out-hook 'save-buffer)
     #+END_SRC
*** babel
    #+BEGIN_SRC emacs-lisp
    (use-package ob-restclient
      :ensure t
      :defer t)

    (use-package ob-rust
      :ensure t
      :defer t)

    ;; active Babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (emacs-lisp . t)
       (shell . t)
       (restclient . t)
       (ledger . t)
       (rust . t)
       (gnuplot . t)
       (org . t)
       (lilypond . t)
       (plantuml . t)
       ))
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-edit-src-content-indentation 0)
    #+END_SRC

    #+begin_src emacs-lisp
    ;; https://emacs.stackexchange.com/questions/44914/choose-individual-startup-visibility-of-org-modes-source-blocks
    (defun individual-visibility-source-blocks ()
      "Fold some blocks in the current buffer."
      (interactive)
      (org-show-block-all)
      (org-block-map
       (lambda ()
         (let ((case-fold-search t))
           (when (and
                  (save-excursion
                    (beginning-of-line 1)
                    (looking-at org-block-regexp))
                  (cl-assoc
                   ':hidden
                   (cl-third
                    (org-babel-get-src-block-info))))
             (org-hide-block-toggle))))))

    (add-hook
     'org-mode-hook
     (function individual-visibility-source-blocks))
    #+end_src
*** projects and publish
    #+BEGIN_SRC emacs-lisp
    (setq org-projects-base (locate-contents-file "org/"))
    (setq org-projects-publish (locate-contents-file "orgp/"))

            ;;; use a .org-project file in each project directory to define a project
            ;;; org-publish-project-alist would be set just before we try to publish
    (advice-add 'org-publish-current-project :around (lambda (orig-fun &rest args)
                                                       (if (file-exists-p ".org-project")
                                                           (progn
                                                             (setq org-publish-project-alist ())
                                                             (load-file ".org-project")
                                                             (apply orig-fun args)
                                                             (setq org-publish-project-alist ()))
                                                         (message "no .org-project definition found.")
                                                         )
                                                       ))

    (defun z/org-init-project-directory (&optional template)
      "for now, use default template only"
      (interactive)
      (if (file-exists-p ".org-project")
          (message ".org-project file already existed.")
        (let* ((template-candidates (cl-remove-if (lambda (x)
                                                    (or (string= "." x)
                                                        (string= ".." x))
                                                    )
                                                  (directory-files org-tpl-directory)))
               (template (helm-comp-read "Select template: " template-candidates)))
          (progn
            (copy-file (concat org-tpl-directory (concat template "/.org-project")) ".org-project" )
            (message ".org-project file created.")
            ))
        )
      )

    (define-key org-mode-map "\C-c\C-xh" 'z/org-init-project-directory)
    #+END_SRC
*** export
    #+BEGIN_SRC emacs-lisp
    (setq org-tpl-directory (locate-stuff-file "orgtemplate/"))

    (setq org-html-head-include-default-style nil)
    (setq org-html-head-include-scripts nil)
    (setq org-html-doctype "html5")
    (setq org-html-html5-fancy t)
    (setq org-publish-timestamp-directory (locate-runtimes-file "org-timestamps"))
    (setq org-id-locations-file (locate-runtimes-file "org-id-locations"))
    (setq org-export-with-sub-superscripts nil)
    (setq org-html-htmlize-output-type 'inline-css)
    (setq org-export-headline-levels 4)
    (setq org-html-table-default-attributes
          '(:border "0" :cellspacing "0" :cellpadding "6" :rules "none" :frame "none"))
    (setq org-html-validation-link nil)

            ;;; redefine the original one, move the svg related stuff
    (eval-after-load "ox-html"
      '(progn
         (defun org-html--format-image (source attributes info)
           "Return \"img\" tag with given SOURCE and ATTRIBUTES.
            SOURCE is a string specifying the location of the image.
            ATTRIBUTES is a plist, as returned by
            `org-export-read-attribute'.  INFO is a plist used as
            a communication channel."
           (org-html-close-tag
            "img"
            (org-html--make-attribute-string
             (org-combine-plists
              (list :src source
                    :alt (if (string-match-p "^ltxpng/" source)
                             (org-html-encode-plain-text
                              (org-find-text-property-in-string 'org-latex-src source))
                           (file-name-nondirectory source)))
              attributes))
            info)
           )
         )
      )

    (use-package ox-reveal
      :quelpa (ox-reveal :fetcher github :repo "hekinami/org-reveal")
      :defer t
      :config
      (setq org-reveal-root "./reveal.js"))

            ;;; latex
            ;;; font: https://www.google.com/get/noto/help/cjk/
    (setq org-latex-classes
          '(("article"
             "
            \\documentclass[12pt,a4paper]{article}
            \\usepackage[margin=2cm]{geometry}
            \\usepackage{fontspec}
            \\setromanfont{Noto Serif CJK SC:style=Regular}
            \\setsansfont{Noto Sans CJK SC Regular}
            \\setmonofont[Color={999999}]{Noto Sans Mono CJK SC Regular}
            \\XeTeXlinebreaklocale \"zh\"
            \\XeTeXlinebreakskip = 0pt plus 1pt
            \\linespread{1.1}
            \\usepackage{hyperref}
            \\hypersetup{
              colorlinks=true,
              linkcolor=[rgb]{0,0.37,0.53},
              citecolor=[rgb]{0,0.47,0.68},
              filecolor=[rgb]{0,0.37,0.53},
              urlcolor=[rgb]{0,0.37,0.53},
              pagebackref=true,
              linktoc=all,}
            "
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
            ))

    (setq org-latex-with-hyperref t)
    (setq org-latex-default-packages-alist
          '(("margin=2cm" "geometry" t)
            ("" "fontspec" t)
            ("AUTO" "inputenc" t)
            ("" "hyperref" t)
            ("" "fixltx2e" nil)
            ("" "graphicx" t)
            ("" "longtable" nil)
            ("" "float" nil)
            ("" "wrapfig" nil)
            ("" "rotating" nil)
            ("normalem" "ulem" t)
            ("" "amsmath" t)
            ("" "textcomp" t)
            ("" "marvosym" t)
            ("" "wasysym" t)
            ("" "multicol" t)  ; 這是我另外加的，因為常需要多欄位文件版面。
            ("" "amssymb" t)
            ("" "indentfirst" t)
            "\\tolerance=1000"))

            ;;; font: https://www.google.com/get/noto/help/cjk/
    (setq org-latex-classes
          `(("article"
             ,(string-join
               '("\\documentclass[12pt,a4paper]{article}"
                 "[DEFAULT-PACKAGES]"
                 "[PACKAGES]"
                 "\\setromanfont{Noto Serif CJK SC:style=Regular}"
                 "\\setsansfont{Noto Sans CJK SC Regular}"
                 "\\setmonofont[Color={999999}]{Noto Sans Mono CJK SC Regular}"
                 "\\XeTeXlinebreaklocale \"zh\""
                 "\\XeTeXlinebreakskip = 0pt plus 1pt"
                 "\\linespread{1.1}"
                 "\\hypersetup{"
                 "  colorlinks=true,"
                 "  linkcolor=[rgb]{0,0.37,0.53},"
                 "  citecolor=[rgb]{0,0.47,0.68},"
                 "  filecolor=[rgb]{0,0.37,0.53},"
                 "  urlcolor=[rgb]{0,0.37,0.53},"
                 "  pagebackref=true,"
                 "  linktoc=all,}"
                 "[EXTRA]"
                 ) "\n")
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
            ))

    (setq org-latex-pdf-process
          '("xelatex -interaction nonstopmode -output-directory %o %f"
            "xelatex -interaction nonstopmode -output-directory %o %f"
            "xelatex -interaction nonstopmode -output-directory %o %f"))

    (setq org-file-apps '((auto-mode . emacs)
                          ("\\.mm\\'" . default)
                          ("\\.x?html?\\'" . "firefox %s")
                          ("\\.pdf\\'" . "xreader %s")
                          ("\\.jpg\\'" . "xviewer %s")))
    #+END_SRC
*** org-protocol
    #+BEGIN_SRC emacs-lisp
    ;; ;; Save following snippet to .reg file to register protocal in windows
    ;; ;; ------------
    ;; ;; REGEDIT4

    ;; ;; [HKEY_CLASSES_ROOT\org-protocol]
    ;; ;; @="URL:Org Protocol"
    ;; ;; "URL Protocol"=""
    ;; ;; [HKEY_CLASSES_ROOT\org-protocol\shell]
    ;; ;; [HKEY_CLASSES_ROOT\org-protocol\shell\open]
    ;; ;; [HKEY_CLASSES_ROOT\org-protocol\shell\open\command]
    ;; ;; @="\"C:\\Programme\\Emacs\\emacs\\bin\\emacsclientw.exe\" \"%1\""
    ;; ;; ------------

    ;; ;; http://kb.mozillazine.org/Register_protocol
    (use-package org-protocol
      :defer t)
    #+END_SRC
*** link types
    #+BEGIN_SRC emacs-lisp
    ;; Thunderlink support
    ;; https://addons.thunderbird.net/en-us/thunderbird/addon/thunderlink/
    ;; (org-add-link-type "thunderlink" 'org-thunderlink-open)

    ;; (setq thunderlink-thunderbird
    ;;       "/usr/lib/thunderbird/thunderbird")

    ;; (defun org-thunderlink-open (link)
    ;;   (message link)
    ;;   (start-process-shell-command "thunderbird" nil (format "%s -thunderlink thunderlink:%s" thunderlink-thunderbird link)))
    #+END_SRC
*** refile
    #+BEGIN_SRC emacs-lisp
    (add-hook
     'org-mode-hook
     (lambda ()
       (when (string-match "gtd.org" (or buffer-file-name (buffer-name)))
         (make-variable-buffer-local 'org-refile-targets)
         (setq org-refile-targets (quote ((nil :maxlevel . 2)
                                          (org-agenda-files :maxlevel . 2))))
         )
       ))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    #+END_SRC
*** crypt
    #+BEGIN_SRC emacs-lisp
    (use-package org-crypt
      :defer t
      :bind
      (:map org-mode-map
            ("C-c C-/" . org-decrypt-entry))
      :config
      (setq epg-pinentry-mode 'loopback)
      (org-crypt-use-before-save-magic)
      (setq org-tags-exclude-from-inheritance (quote ("crypt")))
      (setq org-crypt-key "zoubibo@amiunique.net")
      (setq auto-save-default nil))
    #+END_SRC
*** drill
    #+BEGIN_SRC emacs-lisp
    (use-package org-drill-table
      :ensure t
      :defer t)
    #+END_SRC
*** extension
    #+BEGIN_SRC emacs-lisp
    (use-package z-org-checkbox
      :config
      (z/checked-to-todo-enable)
      :after org)

    (use-package z-org-repeat
      :config
      (z/org-repeat-enable))
    #+END_SRC
** calender
   #+BEGIN_SRC emacs-lisp
   (setq diary-file (locate-runtimes-file "diary"))
   (unless (file-exists-p diary-file) (write-region nil nil diary-file))
   (setq view-diary-entries-initially t)
   (setq mark-diary-entries-in-calendar t)
   (setq mark-holidays-in-calendar t)
   (setq number-of-diary-entries 7)

   (add-hook 'diary-display-hook 'diary-fancy-display)
   (add-hook 'today-visible-calendar-hook 'calendar-mark-today)

   (use-package calfw
     :ensure t
     :defer t
     :config
     (add-hook 'cfw:calendar-mode-hook
               (lambda ()
                 (set-face-attribute 'cfw:face-toolbar-button-off nil :foreground "white")
                 (set-face-attribute 'cfw:face-toolbar nil :background nil)
                 (z/timestamp-format-setting)))

     (setq cfw:fchar-junction ?╬
           cfw:fchar-vertical-line ?║
           cfw:fchar-horizontal-line ?═
           cfw:fchar-left-junction ?╠
           cfw:fchar-right-junction ?╣
           cfw:fchar-top-junction ?╦
           cfw:fchar-top-left-corner ?╔
           cfw:fchar-top-right-corner ?╗)
     )

   (use-package cal-china-x
     :ensure t
     :defer t
     :config
     (setq cal-china-x-important-holidays cal-china-x-chinese-holidays)
     (setq calendar-holidays cal-china-x-important-holidays))

   (use-package calfw-cal
     :ensure t
     :defer t
     :commands cfw:cal-create-source)

   (use-package calfw-ical
     :ensure t
     :defer t
     :commands cfw:ical-create-source)

   (use-package calfw-org
     :ensure t
     :defer t
     :commands cfw:org-create-source
     :bind (("<f5> <f5>" . z/open-calender)
            ("<f5> a" . cfw:open-org-calender))
     )

   (defun z/open-calendar ()
     (interactive)
     (let* ((sources (list (cfw:cal-create-source "Green"))))
       (when (boundp 'z/ical-source-list) ; z/ical-source-list can be set in custom.el, and cfw:ical-create-source will create one item
         (setcdr sources z/ical-source-list)
         )
       (cfw:open-calendar-buffer :contents-sources sources)
       )
     )
   #+END_SRC
** note taking
*** deft
    #+BEGIN_SRC emacs-lisp
    (use-package deft
      :ensure t
      :bind 
      (("C-c n n" . deft)
       ("<f9>" . deft))
      :config
      (setq deft-default-extension "org")
      (setq deft-extensions '("org"))
      (setq deft-directory (locate-contents-file "organizer/deft"))
      (setq deft-new-file-format "%Y-%m-%dT%H%M")
      (setq deft-auto-save-interval 0)
      )
    #+END_SRC
*** org-journal
    #+BEGIN_SRC emacs-lisp
    (use-package org-journal
      :ensure t
      :bind
      (("C-c n j" . org-journal-new-entry))
      :config
      (setq org-journal-dir (locate-contents-file "organizer/journal"))
      (setq org-journal-file-type 'weekly)
      (setq org-journal-cache-file (locate-runtimes-file "org-journal.cache")))
    #+END_SRC
*** diary-manager
    #+BEGIN_SRC emacs-lisp
    (use-package diary-manager
      :ensure t
      :bind
      (("C-c n d d" . diary-manager-edit)
       ("C-c n d b" . diary-manager-browse))
      :config
      (setq diary-manager-location (locate-contents-file "organizer/diary"))
      (setq diary-manager-enable-git-integration nil)
      (setq diary-manager-entry-extension ".org.gpg"))
    #+END_SRC
*** org-brain
    #+BEGIN_SRC emacs-lisp
    (use-package org-brain
      :ensure t
      :bind
      (("C-c n b" . org-brain-visualize))
      :config
      (setq org-id-track-globally t)
      (push '("b" "Brain" plain (function org-brain-goto-end)
              "* %i%?" :empty-lines 1)
            org-capture-templates)
      (setq org-brain-visualize-default-choices 'all)
      (setq org-brain-title-max-length 12))
    #+END_SRC
*** org-roam
    #+begin_src emacs-lisp
    (use-package org-roam
      :ensure t
      :defer t
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory (locate-contents-file "roam/"))
      :config
      ;; (require 'org-roam-protocol)
      :bind (:map org-roam-mode-map
                  (("C-c n r l" . org-roam)
                   ("C-c n r f" . org-roam-find-file)
                   ("C-c n r j" . org-roam-jump-to-index)
                   ("C-c n r b" . org-roam-switch-to-buffer)
                   ("C-c n r c" . org-roam-capture)
                   ("C-c n r g" . org-roam-graph))
                  :map org-mode-map
                  (("C-c n r i" . org-roam-insert))))
    #+end_src

    #+begin_src emacs-lisp
    (use-package org-roam-server
      :ensure t
      :defer t
      :config
      (setq org-roam-server-host "127.0.0.1"
            org-roam-server-port 8080
            org-roam-server-export-inline-images t
            org-roam-server-authenticate nil
            org-roam-server-network-poll t
            org-roam-server-network-arrows nil
            org-roam-server-network-label-truncate t
            org-roam-server-network-label-truncate-length 60
            org-roam-server-network-label-wrap-length 20))
    #+end_src

    #+begin_src emacs-lisp
    (use-package company-org-roam
      :ensure t
      :defer t
      :config
      (push 'company-org-roam company-backends))
    #+end_src

    #+begin_src emacs-lisp
    (use-package org-roam-graph :defer t)
    (use-package org-roam-doctor :defer t)
    (use-package org-roam-db  :defer t)
    (use-package org-roam-dailies  :defer t)
    (use-package org-roam-capture  :defer t)
    (use-package org-roam-completion  :defer t)
    (use-package org-roam-buffer  :defer t)
    (use-package org-roam-faces  :defer t)
    (use-package org-roam-macs  :defer t)
    (use-package org-roam-compat  :defer t)
    #+end_src
*** simplenote2
    #+BEGIN_SRC emacs-lisp
    (use-package simplenote2
      :ensure t
      :defer t)
    #+END_SRC
*** zote
    #+begin_src emacs-lisp
    (use-package zote
      :bind (("<f8> p" . zote-publish)
             ("<f8> v a" . zote-volume-add)
             ("<f8> v d" . zote-volume-delete)
             ("<f8> v v" . zote-volume-view)
             ("<f8> e e" . zote-volume-edit-1)
             ("<f8> e v" . zote-volume-edit))
      :config
      (setq zote-source-dir (locate-contents-file "organizer/notebook"))
      (setq zote-target-dir (locate-runtimes-file "notebook"))
      (setq zote-theme "simple"))
    #+end_src

** ledger
   #+BEGIN_SRC emacs-lisp
   (use-package ledger-mode
     :ensure t
     :mode "\\.ledger$" 
     :commands (ledger-payees-in-buffer)
     :config
     (setq ledger-reconcile-default-commodity "CNY"))

   (use-package ledger-capture
     :defer t)
   #+END_SRC
** todochiku
   #+BEGIN_SRC emacs-lisp
   ;; (require-package 'todochiku)
   ;; (if *is-windows*
   ;;     (setq todochiku-command "C:/Program Files (x86)/full phat/Snarl/tools/heysnarl.exe")
   ;;   )
   ;; (require 'todochiku)
   ;; ;;; overwrite the origin one
   ;; (defun todochiku-get-arguments (title message icon sticky)
   ;;   "Gets todochiku arguments.
   ;; This would be better done through a customization probably."
   ;;   (cl-case system-type
   ;;     ('windows-nt (list (concat "notify" 
   ;;                                "?title=" (encode-coding-string title 'gb18030)
   ;;                                "&text=" (encode-coding-string message 'gb18030)
   ;;                                "&icon=" icon 
   ;;                                (when sticky "&timeout=0")))) ; modified this line for Snarl R3.1
   ;;     ('darwin (list title (if sticky "-s" "") "-m" message "--image" icon ))
   ;;     (t (list "-i" icon "-t"
   ;;              (if sticky "0" (int-to-string (* 1000 todochiku-timeout)))
   ;;              title message))))
   #+END_SRC
** password store
   #+begin_src emacs-lisp
   (use-package pass
     :ensure t
     :commands (pass))
   #+end_src
* development
** common tasks
   #+BEGIN_SRC emacs-lisp
   (use-package compile
     :bind ("<f12>" . compile)
     :config
     (setq compilation-scroll-output t)
     (defun colorize-compilation-buffer ()
       (toggle-read-only)
       (ansi-color-apply-on-region compilation-filter-start (point))
       (toggle-read-only))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer))

   (use-package realgud
     :ensure t
     :commands (realgud:gdb))

   (use-package flymake
     :defer t)
   #+END_SRC

   #+begin_src emacs-lisp
   ;; (use-package helm-xref
   ;;   :ensure t
   ;;   :init
   ;;   (if (< emacs-major-version 27)
   ;;       (setq xref-show-xrefs-function 'helm-xref-show-xrefs)
   ;;     (setq xref-show-xrefs-function 'helm-xref-show-xrefs-27))
   ;;   )
   #+end_src

   #+begin_src emacs-lisp
   (use-package lsp-mode
     :ensure t
     :hook (rust-mode . lsp)
     :commands (lsp lsp-deferred)
     :config
     (setq lsp-session-file (locate-runtimes-file ".lsp-session-v1"))
     (push 'company-capf company-backends)
     )

   ;; (use-package company-lsp
   ;;   :ensure t
   ;;   :after (lsp-mode)
   ;;   :config
   ;;   (push 'company-lsp company-backends))

   (use-package lsp-ui
     :ensure t
     :after (lsp-mode))
   #+end_src
** flycheck
   #+begin_src emacs-lisp
   (use-package flycheck
     :ensure t
     :init (global-flycheck-mode))
   #+end_src

   #+begin_src emacs-lisp
   (use-package flycheck-rust
     :ensure t
     :hook (rust-mode . (lambda nil (flycheck-rust-setup))))
   #+end_src

   #+begin_src emacs-lisp
   (use-package flycheck-ledger
     :ensure t)
   #+end_src
** version control
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :init
     (setq auto-revert-check-vc-info t)
     :bind
     (("C-x g" . magit-status)
      ("C-x M-g" . magit-dispatch-popup)))

   (use-package dired-k
     :ensure t :defer t)

   (use-package diff-hl
     :ensure t
     :init
     (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
     :config    
     (global-diff-hl-mode 1))

   (use-package eshell-git-prompt
     :ensure t
     :after eshell
     :config
     (eshell-git-prompt-use-theme 'git-radar))

   (use-package git-messenger
     :ensure t
     :bind ("C-x v p" . git-messenger:popup-message))

   (use-package git-timemachine
     :ensure t
     :commands (git-timemachine git-timemachine-toggle))
   #+END_SRC
** database
   #+BEGIN_SRC emacs-lisp
   (use-package edbi
     :defer t
     :ensure t
     :config
     (setq edbi:query-result-fix-header nil)
     (setq edbi:ds-history-file (locate-runtimes-file ".edbi-ds-history")))

   (use-package edbi-database-url
     :ensure t
     :commands (edbi-database-url))
   #+END_SRC
** web
*** editing 
**** input assistent
     #+BEGIN_SRC emacs-lisp
     (use-package ac-html
       :ensure t
       :defer t)

     (use-package emmet-mode
       :ensure t
       :defer t
       :init
       (add-hook 'css-mode-hook 'emmet-mode))

     (use-package web-beautify
       :ensure t
       :bind (:map
              js2-mode-map
              ("C-c b" . web-beautify-js)
              :map
              json-mode-map
              ("C-c b" . web-beautify-js)
              :map
              css-mode-map
              ("C-c b" . web-beautify-css)
              :map
              html-mode-map
              ("C-c b" . web-beautify-html))
       :after (js2-mode json-mode css-mode sgml-mode))
     #+END_SRC
**** source files
     #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :defer t
       :mode (("\\.phtml\\'" . web-mode)
              ("\\.tpl\\'" . web-mode)
              ("\\.tpl\\.php\\'" . web-mode)
              ("layout.*\\.php\\'" . web-mode)
              ("\\.jsp\\'" . web-mode)
              ("\\.as[cp]x\\'" . web-mode)
              ("\\.erb\\'" . web-mode)
              ("\\.mustache\\'" . web-mode)
              ("\\.djhtml\\'" . web-mode)
              ("\\.html\\'" . web-mode)
              ("\\.htm\\'" . web-mode)
              ("\\.vue\\'" . web-mode)
              ("\\.swig\\'" . web-mode))
       :config
       (setq web-mode-engines-alist
             '(("django" . "\\.swig\\'")
               ("django" . "\\.djhtml\\'")))
       ;;; redefine the django engine keywords with new ones
       (setq web-mode-django-keywords
             (regexp-opt
              '("and" "as" "assign"
                "break" "cache" "call" "case" "context" "continue"
                "do" "flush" "from" "ignore" "import" "in" "is"
                "layout" "load" "missing" "none" "not" "or" "pluralize"
                "random" "set" "unless" "use" "var"
                "with"                         ; new added
                )))
       (setq web-mode-markup-indent-offset 2
             web-mode-css-indent-offset 2
             web-mode-code-indent-offset 2
             web-mode-indent-style 2
             web-mode-style-padding 1
             web-mode-script-padding 1
             web-mode-block-padding 0
             web-mode-comment-style 2
             web-mode-enable-auto-pairing nil)
       (setq web-mode-enable-current-column-highlight t)
       (setq web-mode-enable-current-element-highlight t)
       (add-hook
        'web-mode-hook
        (lambda ()
          (setq-local
           electric-pair-pairs
           (append electric-pair-pairs '((?% . ?%))))
          (emmet-mode)
          (setq emmet-preview-default t)
          )))

     (use-package rainbow-mode
       :ensure t
       :defer t)

     (use-package css-mode
       :defer t
       :config
       (setq css-indent-offset 2))

     (use-package less-css-mode
       :ensure t
       :defer t)

     (use-package sass-mode
       :ensure t
       :defer t)

     (use-package scss-mode
       :ensure t
       :defer t)

     (use-package apib-mode
       :ensure t
       :defer t
       :mode ("\\.apib\\'" . apib-mode))
     #+END_SRC
*** debugging
    #+BEGIN_SRC emacs-lisp
    (use-package impatient-mode
      :ensure t
      :defer t)

    (use-package restclient
      :ensure t
      :defer t
      :config
      (defun restclient nil
        (interactive)
        (switch-to-buffer (generate-new-buffer "*restclient*"))
        (restclient-mode))
      )
    #+END_SRC

** other programming languages
*** javascript
**** editing
     #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :ensure t
       :defer t
       :mode ("\\.js\\'" . js2-mode)
       :init
       (add-hook 'js2-mode-hook #'lsp)
       (add-hook 'js2-mode-hook '(lambda () (setq mode-name "JS2")))
       :config
       (setq js2-basic-offset 2))
     #+END_SRC

     #+begin_src emacs-lisp
     (use-package rjsx-mode
       :ensure t
       :defer t
       :init
       (add-hook 'rjsx-mode-hook 'emmet-mode))
     #+end_src
**** interaction and debugging
     #+BEGIN_SRC emacs-lisp
     (use-package js-comint
       :ensure t
       :defer t
       :init
       (setenv "NODE_NO_READLINE" "1")		;http://stackoverflow.com/questions/9390770/node-js-prompt-can-not-show-in-eshell
       :config
       (setq inferior-js-program-command "node")

       (add-hook
        'js2-mode-hook
        '(lambda () 
           (local-set-key "\C-x\C-e" 'js-send-last-sexp)
           (local-set-key "\C-\M-x" 'js-send-last-sexp-and-go)
           (local-set-key "\C-cb" 'js-send-buffer)
           (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
           (local-set-key "\C-cl" 'js-load-file-and-go)
           ))  
       )

     (use-package indium
       :ensure t
       :defer
       :init
       (setq indium-chrome-data-dir (expand-file-name (locate-runtimes-file "indium-chrome-profile")))
       :config
       (setq indium-chrome-executable "chrome")
       (add-hook 'js2-mode-hook #'indium-interaction-mode)
       (add-hook 'web-mode-hook #'indium-interaction-mode))

     (use-package skewer-mode
       :ensure t
       :defer t)
     #+END_SRC
*** python
**** editing
     #+BEGIN_SRC emacs-lisp
     (use-package python
       :mode "python-mode"
       :config
       (setq python-indent-guess-indent-offset nil))
     #+END_SRC
**** virtual
     #+BEGIN_SRC emacs-lisp
     (use-package python-environment
       :defer t
       :config
       (setq python-environment-directory (locate-runtimes-file ".python-environments")))

     (use-package pyvenv
       :ensure t
       :after company-jedi
       :init

       ;; https://www.reddit.com/r/emacs/comments/7styea/problem_with_companyjedi_after_pyvenvworkon/
       (with-eval-after-load 'company-jedi
         (dolist (hook '(pyvenv-post-activate-hooks pyvenv-post-deactivate-hooks))
           (add-hook hook
                     (lambda ()
                       (if (and pyvenv-virtual-env
                                (not (member pyvenv-virtual-env jedi:server-args))
                                (not (file-remote-p pyvenv-virtual-env)))
                           (setq jedi:server-args (list "--virtual-env" pyvenv-virtual-env))
                         (setq jedi:server-args nil))
                       (jedi:stop-server)))))
       :config
       (pyvenv-activate (concat python-environment-directory "/py3jedi")))
     #+END_SRC
**** completion
     #+BEGIN_SRC emacs-lisp
     (use-package company-jedi
       :ensure t
       :defer t
       :init
       (setq jedi:environment-root "py3jedi")
       (setq jedi:environment-virtualenv '("virtualenv" "--system-site-packages" "-p" "python3" "--always-copy" "--quiet"))
       (setq jedi:complete-on-dot t)
       (setq jedi:tooltip-method nil)
       (defun my/python-mode-hook ()
         (add-to-list 'company-backends 'company-jedi)
         (local-set-key (kbd "M-.") 'jedi:goto-definition)
         (local-set-key (kbd "M-,") 'jedi:goto-definition-pop-marker)
         (local-set-key (kbd "C-c ?") 'jedi:show-doc)
         (local-set-key (kbd "C-c /") 'helm-jedi-related-names)
         )

       (add-hook 'python-mode-hook 'my/python-mode-hook))
     #+END_SRC
**** django
     #+BEGIN_SRC emacs-lisp
     (use-package python-django
       :ensure t
       :bind ("C-z j" . python-django-open-project))
     #+END_SRC
*** ruby
**** completion
     #+BEGIN_SRC emacs-lisp
     (use-package robe
       :ensure t
       :defer t
       :init
       (add-hook 'ruby-mode-hook 'robe-mode)
       :config
       (add-hook 'robe-mode-hook 'ac-robe-setup))
     #+END_SRC
*** go
**** reference
     configuration based on http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/
     #+BEGIN_EXAMPLE
     go get github.com/rogpeppe/godef
     go get -u github.com/nsf/gocode
     #+END_EXAMPLE

**** editing
     #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :ensure t
       :defer t
       :config
       (add-hook 'go-mode-hook
                 (lambda ()
                   (setq tab-width 4)
                   (setq standard-indent 4)
                   (setq indent-tabs-mode nil)
                   (local-set-key (kbd "C-c .") 'godef-jump)
                   (local-set-key (kbd "C-c ,") 'pop-tag-mark)
                   (if (not (string-match "go" compile-command))
                       (set (make-local-variable 'compile-command)
                            "go build -v && go test -v && go vet"))
                   )))
     #+END_SRC
**** completion
     #+BEGIN_SRC emacs-lisp
     ;; (use-package go-autocomplete
     ;;   :ensure t
     ;;   :after go-mode)

     (use-package company-go
       :ensure t
       :after go-mode)
     #+END_SRC
*** solidity
    #+BEGIN_SRC emacs-lisp
    (use-package solidity-mode
      :ensure t
      :mode ("\\.sol\\'" . solidity-mode)
      :config
      (setq c-basic-offset 4))
    #+END_SRC
*** rust
    #+BEGIN_SRC emacs-lisp
    (use-package rust-mode
      :ensure t
      :defer t)

    (use-package rust-playground
      :ensure t
      :commands (rust-playground)
      :config
      (setq rust-playground-basedir (locate-contents-file "rust-playground")))

    (use-package cargo
      :ensure t
      :defer t)
    #+END_SRC
*** lisp
    #+BEGIN_SRC emacs-lisp
    (use-package paredit
      :ensure t
      :diminish paredit-mode
      :commands paredit-mode
      :defer t)

    (add-hook
     'emacs-lisp-mode-hook
     (lambda ()
       (show-paren-mode 1)
       (turn-on-eldoc-mode)
       (paredit-mode)
       (local-set-key (kbd "C-c s") 'elisp-index-search)))

    (add-hook
     'ielm-mode-hook
     (lambda ()
       (eldoc-mode)
       ))

    (use-package slime
      :ensure t
      :defer t
      :config
      (setq inferior-lisp-program "sbcl")
      (slime-setup '(slime-fancy)))
    #+END_SRC
*** php
    #+BEGIN_SRC emacs-lisp
    (use-package php-mode
      :ensure t
      :mode ("\\.php\\'" . php-mode))

    (use-package geben
      :ensure t
      :defer t
      :config
      (setq geben-pause-at-entry-line nil)
      (setq geben-display-window-function 'pop-to-buffer-same-window)
      (setq geben-temporary-file-directory (locate-runtimes-file "geben")))
    #+END_SRC
*** shader
    #+BEGIN_SRC emacs-lisp
    (use-package shader-mode
      :ensure t
      :mode "shader-mode")
    #+END_SRC
*** dart
    #+BEGIN_SRC emacs-lisp
    (use-package dart-mode
      :ensure t
      :mode "dart-mode")
    #+END_SRC
*** sql
    #+begin_src emacs-lisp
    (use-package sql-indent
      :quelpa (sql-indent :fetcher github :repo "alex-hhh/emacs-sql-indent")
      :defer t
      :config
      (add-hook 'sql-mode-hook 'sqlind-minor-mode)
      )
    #+end_src
*** lua
    #+begin_src emacs-lisp
    (use-package lua-mode
      :ensure t
      :defer t)
    #+end_src
** other data formats
*** json
    #+BEGIN_SRC emacs-lisp
    (use-package json-mode
      :ensure t
      :defer t)
    #+END_SRC
*** toml
    #+BEGIN_SRC emacs-lisp
    (use-package toml-mode
      :ensure t
      :defer t
      :mode ("Cargo.lock\\'" . toml-mode))
    #+END_SRC
*** yaml
    #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure t
      :defer t)
    #+END_SRC
*** markdown
    #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :defer t)
    #+END_SRC
*** dockerfile
    #+BEGIN_SRC emacs-lisp
    (use-package dockerfile-mode
      :ensure t
      :defer t)
    #+END_SRC
*** terraform
    #+BEGIN_SRC emacs-lisp
    (use-package terraform-mode
      :ensure t
      :defer t)
    #+END_SRC
*** gnuplot
    #+begin_src emacs-lisp
    (use-package gnuplot
      :ensure t
      :defer t
      :config
      ;; https://www.mail-archive.com/emacs-orgmode@gnu.org/msg127209.html
      (setq gnuplot-insertions-menu-flag nil))
    #+end_src
*** protobuf
    #+begin_src emacs-lisp
    (use-package protobuf-mode
      :ensure t
      :defer t)
    #+end_src
* multimedia
** the emacs multimedia system
   #+BEGIN_SRC emacs-lisp
   (use-package emms
     :ensure t
     :defer t
     :init
     (setq default-process-coding-system '(utf-8 . utf-8))
     :config
     (require 'emms-setup)
     (emms-standard)
     (emms-default-players))
   #+END_SRC
* interaction with other systems
** shell
   #+BEGIN_SRC emacs-lisp
   (use-package eshell
     :commands (eshell)
     :config
     (setq eshell-directory-name (locate-runtimes-file "eshell"))
     (add-hook 'eshell-mode-hook
               (lambda ()
                 (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history)
                 (define-key eshell-mode-map (kbd "M-n") 'helm-esh-pcomplete)
                 )))

   (use-package exec-path-from-shell
     :ensure t
     :init
     (setq exec-path-from-shell-check-startup-files nil)
     :config
     (exec-path-from-shell-initialize))
   #+END_SRC
** erc
   #+BEGIN_SRC emacs-lisp
   (setq erc-log-channels-directory "~/.erc/logs/")

   (defun z/erc-generate-log-file-name (buffer target nick server port)
     "Generates a log-file name in the way ERC always did it.
   This results in a file name of the form #channel!nick@server:port.txt.
   This function is a possible value for `erc-generate-log-file-name-function'."
     (let ((file (concat
                  (if target (concat target "!"))
                  nick "@" server "_" (cond ((stringp port) port)
                                            ((numberp port)
                                             (number-to-string port))) ".txt")))
       ;; we need a make-safe-file-name function.
       (convert-standard-filename file)))

   (setq erc-generate-log-file-name-function 'z/erc-generate-log-file-name)
   (setq erc-log-file-coding-system 'utf-8)

   (defun z/bitlbee-connect ()
     (interactive)
     (erc :server "localhost"
          :nick z/bitlbee-nickname))
   ;;; set z/bitlbee-nickname in custom.el

   (defalias 'z/erc 'z/bitlbee-connect)

   ;;; https://github.com/fgeller/emacs-init/blob/master/init-erc.el
   ;; http://emacs-fu.blogspot.de/2012/03/social-networking-with-bitlbee-and-erc.html
   (defun fg/bitlbee-identify ()
     (when (and (string= "localhost" erc-session-server)
                (string= "&bitlbee" (buffer-name)))
       (erc-message "PRIVMSG" (format "%s identify %s"
                                      (erc-default-target)
                                      z/bitlbee-password))))
   ;;; set z/bitlbee-password in custom.el

   (add-hook 'erc-join-hook 'fg/bitlbee-identify)

   ;;; https://github.com/fgeller/emacs-init/blob/master/init-erc.el
   (defun fg/notify-privmsg (proc parsed)
     (let ((nick (car (erc-parse-user (erc-response.sender parsed))))
           (target (car (erc-response.command-args parsed)))
           (msg (erc-response.contents parsed)))
       (when (and (erc-current-nick-p target)
                  (not (erc-is-message-ctcp-and-not-action-p msg)))
         (todochiku-message (format "ERC message from: %s" nick)
                            msg
                            (todochiku-icon 'irc)
                            nil)))
     nil)

   (add-hook 'erc-server-PRIVMSG-functions 'fg/notify-privmsg t)

   #+END_SRC
** telega
   #+begin_src emacs-lisp
   (use-package telega
     :ensure t
     :commands (telega)
     :config
     (setq telega-proxies
         '(
           (:server "127.0.0.1" :port 1080 :enable t :type (:@type "proxyTypeSocks5"))))
     )
   #+end_src
